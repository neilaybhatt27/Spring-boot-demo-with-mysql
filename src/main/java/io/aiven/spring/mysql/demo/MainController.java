package io.aiven.spring.mysql.demo;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/users/add") // Map ONLY POST Requests
  public @ResponseBody User addNewUser (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User newUser = new User();
    newUser.setName(name);
    newUser.setEmail(email);
    userRepository.save(newUser);
    return newUser;
  }

  @GetMapping(path="/users")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path="/users/{id}")
  public @ResponseBody Optional<User> getUser(@PathVariable int id) {
    return userRepository.findById(id);
  }

  // @PutMapping(path="/users/{id}")
  // public @ResponseBody User updateUser(@RequestBody User newUser, @PathVariable int id ){
  //   return userRepository.findById(id)
  //   .map(user -> {
  //     user.setName(newUser.getName());
  //     user.setEmail(newUser.getEmail());
  //     return userRepository.save(newUser);
  //   })
  //   .orElseGet(() -> {
  //     newUser.setId(id);
  //     return userRepository.save(newUser);
  //   });
  // }

  @DeleteMapping(path="/users/{id}")
  void deleteUser(@PathVariable int id) {
    userRepository.deleteById(id);
  }
}

